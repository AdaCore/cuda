project CUDA is

   type Execution_Side_Type is ("Host", "Device");

   Execution_Side : Execution_Side_Type := external ("Execution_Side", "Host");

   for Create_Missing_Dirs use "True";

   case Execution_Side is
      when "Host" => 
         for Source_Dirs use ("host/cuda_api", "host/cuda_raw_binding", "cuda_internal", "common_static", "host_static");

      when "Device" =>
         --  ??? It's not clear yet how to generate bindings to the device side
         --  as they are very C++ specific. work on the host generated files
         --  for now to ensure at least compilation OK.
         for Source_Dirs use ("host/cuda_api", "host/cuda_raw_binding", "cuda_internal", "common_static", "device_static");
   end case;

   for Object_Dir use "obj";

   package Compiler is
      for Switches ("Ada") use ("-g", "-gnatp");
   end Compiler;

   package Linker is
      for Default_Switches ("ada") use ("-L/usr/local/cuda/targets/x86_64-linux/lib/stubs", "-L/usr/local/cuda/targets/x86_64-linux/lib", "-lcudadevrt","-lcudart_static", "-lrt", "-lpthread", "-ldl");
   end Linker;

end CUDA;
