with Ada.Numerics.Float_Random; use Ada.Numerics.Float_Random;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Unchecked_Deallocation;

with Interfaces; use Interfaces;
with Interfaces.C;            use Interfaces.C;
with Interfaces.C.Extensions; use Interfaces.C.Extensions;
with Interfaces.C.Strings;

with System;
with System.Storage_Elements;
with CUDA.Runtime_Api;  use CUDA.Runtime_Api;
with CUDA.Driver_Types; use CUDA.Driver_Types;
with CUDA.Vector_Types; use CUDA.Vector_Types;
with CUDA.Crtdefs;
with CUDA.Internal;

with Kernel; use Kernel;

procedure Main is

   type U64 is mod 2 ** 64;
   type Fatbin_Data is Array (Positive range <>) of U64;

   Fat_Binary : Fatbin_Data := (
16#00100001ba55ed50#, 16#00000000000013e0#,
16#0000004001010002#, 16#0000000000001128#,
16#0000000000001126#, 16#0000004b00010007#,
16#0000000000000000#, 16#0000000000002013#,
16#0000000000000000#, 16#00000000000026a8#,
16#010102464c457fa2#, 16#0002670001000733#,
16#26110001006600be#, 16#0007218000310006#,
16#40004b054b000ef5#, 16#1200400003003800#,
16#7368732e00000100#, 16#082e006261747274#,
16#1cf100086d792700#, 16#2e0078646e68735f#,
16#006f666e692e766e#, 16#656b2e747865742e#,
16#6c665f5f6c656e72#, 16#617272615f74616f#,
16#6c676b0025504979#, 16#76a500276c61626f#,
16#64615f726f746365#, 16#6f05001c0f004964#,
16#001e646572616873#, 16#6174736e6f639f05#,
16#723f02002130746e#, 16#6564b40f00256c65#,
16#6d6172665f677562#, 16#656e696c40000d65#,
16#5f54000f5f16005f#, 16#180e005273736173#,
16#7874707700140500#, 16#dd0000127478745f#,
16#002a6765725f4c00#, 16#6570797442001805#,
16#657249008b09005a#, 16#1f019c0f0012616c#,
16#1501b20f0201960f#, 16#013500452e002103#,
16#1201ad0f4201ce0f#, 16#61705f6f0d00210f#,
16#010f9901d56d6172#, 16#03000000488c0b00#,
16#1864110001000f00#, 16#8b11000100112c00#,
16#20000100102c0018#, 16#01000e2c00180103#,
16#00042c00182b1100#, 16#052c001838110001#,
16#2c00184411000100#, 16#0018701100010006#,
16#188211000100072c#, 16#9a11000100082c00#,
16#57000100092c0018#, 16#2200f01200000032#,
16#00006f5700010080#, 16#0100022200f01100#,
16#f010170030781000#, 16#ffffff6600cb0300#,
16#000100000c0680ff#, 16#80947c0400030bf0#,
16#00288080810c2880#, 16#808007288081ff08#,
16#8310000582074880#, 16#8513000584100005#,
16#5830000a5810000a#, 16#0005871000058607#,
16#0005891000058810#, 16#00058b1000058a10#,
16#00058d1000058c10#, 16#00058f1000058e10#,
16#0005911000059010#, 16#0005931000059210#,
16#0005951000059410#, 16#0005971000059610#,
16#0005991000059810#, 16#00059b1000059a10#,
16#00059d1000059c10#, 16#00059f1000059e10#,
16#0005a1100005a010#, 16#8080a3600005a210#,
16#05a5100005a40858#, 16#05a7100005a61000#,
16#05a9100005a81000#, 16#05ab100005aa1000#,
16#05ad100005ac1000#, 16#05af100005ae1000#,
16#05b1100005b01000#, 16#05b3100005b21000#,
16#05b5100005b41000#, 16#05b7100005b61000#,
16#05b9100005b81000#, 16#05bb100005ba1000#,
16#05bd100005bc1000#, 16#808040008cbe1000#,
16#0145101000050880#, 16#013b101001451010#,
16#013b1010013b1010#, 16#73082820001e1010#,
16#2328808082085001#, 16#2328100023281000#,
16#5e28100023281000#, 16#5e2810015e281001#,
16#5e2810015e281001#, 16#5e2810015e281001#,
16#5e2810015e281001#, 16#1000059008283001#,
16#1000059210000591#, 16#082001d700000593#,
16#1000059610000595#, 16#1000059810000597#,
16#1000059a10000599#, 16#1000059c1000059b#,
16#1000059e1000059d#, 16#100005a01000559f#,
16#100005a2100005a1#, 16#100005a4100019a3#,
16#100005a6100005a5#, 16#100005a8100019a7#,
16#100005aa100005a9#, 16#100005ac100019ab#,
16#100005ae100005ad#, 16#100005b0100019af#,
16#100005b2100005b1#, 16#100005b4100019b3#,
16#100005b6100005b5#, 16#100005b8100019b7#,
16#100005ba100005b9#, 16#100005bc100019bb#,
16#100005be100005bd#, 16#100005c0100019bf#,
16#100005c2100005c1#, 16#100005c4100019c3#,
16#100005c6100005c5#, 16#100005c8100019c7#,
16#100005ca100005c9#, 16#100005cc100019cb#,
16#100005ce100005cd#, 16#100005d0100019cf#,
16#100005d2100005d1#, 16#100005d4100019d3#,
16#100005d6100005d5#, 16#100005d8100019d7#,
16#100005da100005d9#, 16#100005dc100019db#,
16#100005de100005dd#, 16#100005e0100019df#,
16#100005e2100005e1#, 16#100005e4100019e3#,
16#100005e6100005e5#, 16#100005e8100019e7#,
16#100005ea100005e9#, 16#100005ec100019eb#,
16#100005ee100005ed#, 16#100005f0100019ef#,
16#100005f2100005f1#, 16#100005f4100019f3#,
16#100005f6100005f5#, 16#100005f8100019f7#,
16#100005fa100005f9#, 16#100005fc100019fb#,
16#100005fe100005fd#, 16#1003e880100019ff#,
16#6000058210000581#, 16#0005840828808183#,
16#0005861000058510#, 16#0005881000198710#,
16#00058a1000058910#, 16#00058c1000198b10#,
16#00058e1000058d10#, 16#0005901000198f10#,
16#0005921000059110#, 16#0005941000199310#,
16#0005961000059510#, 16#0005981000199710#,
16#00059a1000059910#, 16#00059c1000199b10#,
16#00059e1000059d10#, 16#0005a01000199f10#,
16#0005a2100005a110#, 16#0005a4100019a310#,
16#0005a6100005a510#, 16#0005a8100019a710#,
16#0005aa100005a910#, 16#0005ac100019ab10#,
16#0005ae100005ad10#, 16#0005b0100019af10#,
16#0005b2100005b110#, 16#0005b4100019b310#,
16#0005b6100005b510#, 16#0005b8100019b710#,
16#0005ba100005b910#, 16#0005bc100019bb10#,
16#0005be100005bd10#, 16#0005c0100019bf10#,
16#0005c2100005c110#, 16#0005c4100019c310#,
16#0005c6100005c510#, 16#0005c8100019c710#,
16#0005ca100005c910#, 16#0005cc100019cb10#,
16#0005ce100005cd10#, 16#0005d0100019cf10#,
16#0005d2100005d110#, 16#0005d4100019d310#,
16#0005d6100005d510#, 16#0005d8100019d710#,
16#0005da100005d910#, 16#0005dc100019db10#,
16#0005de100005dd10#, 16#0005e0100019df10#,
16#0005e2100005e110#, 16#0005e4100019e310#,
16#0005e6100005e510#, 16#0005e8100019e710#,
16#0005ea100005e910#, 16#0005ec100019eb10#,
16#0005ee100005ed10#, 16#0005f0100019ef10#,
16#0005f2100005f110#, 16#0005f4100019f310#,
16#0005f6100005f510#, 16#0005f8100019f710#,
16#0005fa100005f910#, 16#0005fc100019fb10#,
16#8081fe560005fd10#, 16#0100282f06800028#,
16#0206b70070270300#, 16#000906c0041f0699#,
16#10b106c10f1f0008#, 16#1006c1071006c107#,
16#0006c1071006c107#, 16#5810056358100563#,
16#5820056358100563#, 16#1006c1071006c107#,
16#0006c1071006c107#, 16#5810056358100563#,
16#5820056358100563#, 16#1006c1071006c107#,
16#0006c1071006c107#, 16#5810056358100563#,
16#5820056358100563#, 16#1f06c1071006c107#,
16#100023001e06c107#, 16#002a06c10f002328#,
16#2810015e2810015e#, 16#2810015e2810015e#,
16#2810015e2810015e#, 16#2810015e2810015e#,
16#2810015e2810015e#, 16#2810015e2810015e#,
16#2810015e2810015e#, 16#c10f015e2810015e#,
16#5e2810015e000206#, 16#5e2810015e281001#,
16#015e000206c10f01#, 16#015e2810015e2810#,
16#0206c10f015e2810#, 16#10015e2810015e00#,
16#0f015e2810015e28#, 16#2810015e000206c1#,
16#282f015e2810015e#, 16#06c107100506c107#,
16#06c1071006c10710#, 16#c107100506c1071f#,
16#c1071006c1071006#, 16#07100506c1071f06#,
16#071006c1071006c1#, 16#100506c1071f06c1#,
16#1006c1071006c107#, 16#0506c1071f06c107#,
16#06c1071006c10710#, 16#06c1071f06c10710#,
16#c1071006c1071005#, 16#c1071f06c1071006#,
16#071006c107100506#, 16#071f06c1071006c1#,
16#1006c107100506c1#, 16#1f06c1071006c107#,
16#06c107100506c107#, 16#06c1071006c10710#,
16#c107100506c1071f#, 16#c1071006c1071006#,
16#07100506c1071f06#, 16#071006c1071006c1#,
16#100506c1071f06c1#, 16#1006c1071006c107#,
16#0506c1071f06c107#, 16#06c1071006c10710#,
16#06c1071f06c10710#, 16#c1071006c1071005#,
16#c1071f06c1071006#, 16#071006c107100506#,
16#071f06c1071006c1#, 16#1006c107100506c1#,
16#1f06c1071006c107#, 16#06c107100506c107#,
16#06c1071006c10710#, 16#c107100506c1071f#,
16#c1071006c1071006#, 16#07100506c1071f06#,
16#071006c1071006c1#, 16#100506c1071f06c1#,
16#1006c1071006c107#, 16#0506c1071f06c107#,
16#06c1071006c10710#, 16#06c1071f06c10710#,
16#c1071006c1071005#, 16#c1071f06c1071006#,
16#071006c107100506#, 16#071f06c1071006c1#,
16#1006c107100506c1#, 16#0006c1071606c107#,
16#3900010030220674#, 16#03f02300010006c0#,
16#e22106c5021b06c0#, 16#000dac1611000100#,
16#0a0efb0101a00da0#, 16#3f000d0101010100#,
16#002406001a940000#, 16#03000400c90dde09#,
16#0101000180020111#, 16#2103100201f10016#,
16#030120020103f001#, 16#f015000a01300201#,
16#03000600e02c0011#, 16#00d0230005090023#,
16#00070203f0300006#, 16#0000001ff1006803#,
16#6e6f69737265762e#, 16#61742e00342e3620#,
16#5f6d732074656772#, 16#726464612e003537#,
16#657a69735f737365#, 16#736973002e343620#,
16#f3113a20656c6269#, 16#6e67696c612e2000#,
16#203631752e203220#, 16#5f002a3b452810a6#,
16#02118320636e7566#, 16#460410c42e002831#,
16#2b38622e20385f00#, 16#5f05f810ed020300#,
16#0029005d36315b30#, 16#3b7465720000007b#,
16#6e656e006b7d0000#, 16#6906112c20797274#,
16#0000203436623f00#, 16#1300282c1f005e04#,
16#283217140028311f#, 16#1107002832332f00#,
16#65722e03f300d233#, 16#20646572702e2067#,
16#133b3e323c702509#, 16#2509203233669500#,
16#1262110012343c66#, 16#200012363c723600#,
16#383c64c200123436#, 16#2e766f6d00003b3e#,
16#25202c31b8002475#, 16#173b782e6469746e#,
16#746325202c327200#, 16#00a7646c22001861#,
16#5b202c334f001d04#, 16#4400495d190700ad#,
16#6172005f25202c34#, 16#0019732e6f6c2e64#,
16#83010067202c3532#, 16#6573003b3472b300#,
16#11002165672e7074#, 16#04f8002601001770#,
16#2031702540003b33#, 16#42424c0920617262#,
16#00db030095325f31#, 16#5d302f090096341f#,
16#090032351f000032#, 16#32361f010032311f#,
16#757400fa32100900#, 16#00ff656469772e6c#,
16#3b348300c6376423#, 16#0049732e64646100#,
16#2300004f0000dd01#, 16#2f011401001b0a00#,
16#15331101001b3564#, 16#646cb4001b341400#,
16#6c6974616c6f762e#, 16#5b202c3140020565#,
16#1202001e5d1f0029#, 16#00575d3222001e32#,
16#00590000196e7224#, 16#3b3266257b003c00#,
16#0034000039747300#, 16#3b3332001e5d3120#,
16#0f035f3a15018000#, 16#2d0f043a0002038f#,
16#300001001d220115#, 16#1355090007357225#,
16#0510000731722530#, 16#1000140090240508#,
16#240574051012e032#, 16#03003379001400c0#,
16#3410001460050000#, 16#0200148005290573#,
16#053103004c010064#, 16#a002290064702521#,
16#7213973464200028#, 16#7803700000011005#,
16#0000095300150105#, 16#11002a0300152005#,
16#402513e300006735#, 16#7500c93510002a02#,
16#2a02500000018005#, 16#d00566141b361000#,
16#3610002a20000001#, 16#000001e005661418#,
16#1000cf3711001530#, 16#3733003f060069f0#,
16#0015001800150200#, 16#c01600110000d100#,
16#6500006931110015#, 16#69311100bd301600#,
16#00bd401600650000#, 16#1600b90000bd3211#,
16#0000bd3211007ed0#, 16#33100054e01600b9#,
16#02002a60052a0064#, 16#6612002a70180177#,
16#682018008e0001b3#, 16#27003a00003e0000#,
16#18003e0000680310#, 16#22002966120092e0#,
16#1000140200bb0310#, 16#7703200539000733#,
16#1530130029311101#, 16#1300520000e40500#,
16#111e02880f001540#, 16#000103102a000102#,
16#7a030e0e03030e60#, 16#c60d00082f045000#,
16#000c1112000c0007#, 16#00000b5300180013#,
16#01000b2200181800#, 16#0a20002412042700#,
16#1c016000c1016c08#, 16#0c1704001c190300#,
16#f025003603100018#, 16#f02507f601001011#,
16#1008000139001021#, 16#21f002f100010100#,
16#041c0400ff1b0300#, 16#5d1e040000039000#,
16#0044010129001108#, 16#00101d1700780011#,
16#00200d602a009400#, 16#00010f002006a02a#,
16#091400795041ceff#, 16#3fde0003e000c000#,
16#0ac1f00000794700#, 16#000fc0000383ffa6#,
16#00100f0001007918#, 16#0a0000017a028140#,
16#003fde5118c30000#, 16#41001005001a7a02#,
16#25c7000100027919#, 16#720200321e000000#,
16#7802660020020002#, 16#8221001001780003#,
16#300800003403977b#, 16#0200500300033900#,
16#3700202100240318#, 16#7224220020040004#,
16#10078e020440005f#, 16#31004000720c3100#,
16#7202200120f06270#, 16#094751003006001e#,
16#2080120032b00000#, 16#0090600002784900#,
16#700a0024001e0211#, 16#09722900c0081a00#,
16#20081b00200000a0#, 16#02784f0010091800#,
16#60041b0a00606800#, 16#00f00a0060051b00#,
16#2f0060051b002000#, 16#60061b0900600170#,
16#00063b0060071b00#, 16#3100100717002006#,
16#00ff220080027825#, 16#3002190150000160#,
16#0672103101b00a00#, 16#1007f1e0ff42004f#,
16#ff33002007072000#, 16#2004042a00207fe4#,
16#022a002005052a00#, 16#0020090328002008#,
16#200f00800b02500d#, 16#33001f7980220d00#,
16#00e0020120116900#, 16#1a0050051f003008#,
16#0120211400500219#, 16#0040061b00400016#,
16#738527180060071f#, 16#90ab0033de4900b0#,
16#1f00104d003f3503#, 16#2d00010f52041080#,
16#00010c03a0000122#, 16#019c3d0001004022#,
16#0b1f000108003000#, 16#1f0029dc13040040#,
16#072c13130c0040d5#, 16#130055b81300010c#,
16#0103430213003150#, 16#000100081803028d#,
16#000100000054f21f#, 16#8800005f02350811#,
16#40ff1f0a0080000d#, 16#3f00071290210400#,
16#0b2f0b0040001a00#, 16#0040aa1303004001#,
16#371f0b004000982f#, 16#0100134231040040#,
16#0a00400004253f00#, 16#176723040040491f#,
16#1f0b0040021f0100#, 16#0719ef2104004061#,
16#0b0040004e003f00#, 16#0618570500062911#,
16#063c110139030240#, 16#2f00cf0b02240600#,
16#1a7c260400407200#, 16#40101f0040042078#,
16#05e000011f320000#, 16#260040e01300010b#,
16#0240061700400020#, 16#40791f0001001022#,
16#1f00401b002e0400#, 16#0114ac1300004004#,
16#170040201302c40c#, 16#130100c00f01317c#,
16#000100062b004032#, 16#036c031220901d1a#,
16#591f00010080183a#, 16#160aa98014040040#,
16#0c00000d4c004004#, 16#032a00d44e130040#,
16#d80c25b004000100#, 16#0e61061400100c00#,
16#a82a02000100262f#, 16#0113014004000800#,
16#00010c0128040038#, 16#080008060055fc11#,
16#010f00a006170038#, 16#00088000a8040500#,
16#0000000000000000#, 16#0000004801010001#,
16#0000000000000230#, 16#000000400000022f#,
16#0000004b00060004#, 16#0000000000000000#,
16#0000000000002013#, 16#0000000000000000#,
16#0000000000000411#, 16#0000000000000000#,
16#762e0a0a0a0a20f1#, 16#36206e6f69737265#,
16#677261742e0a342e#, 16#35375f6d73207465#,
16#7365726464612e0a#, 16#3620657a69735f73#,
16#69736917f8002e34#, 16#6f6c672e20656c62#,
16#696c612e206c6162#, 16#31752e2032206e67#,
16#6c656e72656b2036#, 16#756644002a3b455f#,
16#665f07f4001a636e#, 16#7272615f74616f6c#,
16#702e0a2850497961#, 16#385f00466d617261#,
16#1103002b38622e20#, 16#5b305f05f800295f#,
16#0a7b0a290a5d3631#, 16#0a0a3b7465720a0a#,
16#72746e6555006b7d#, 16#74636576a6004179#,
16#00696464615f726f#, 16#040000203436623f#,
16#1f1300282c1f005e#, 16#0028321714002831#,
16#331107002832332f#, 16#6765722e02f300d2#,
16#2520646572702e20#, 16#8500123b3e323c70#,
16#343c662520323366#, 16#722546004c000011#,
16#343602f10011363c#, 16#3b3e383c64722520#,
16#22752e766f6d0a0a#, 16#746e25202c31b700#,
16#7200163b782e6469#, 16#1761746325202c32#,
16#1c0300a1646c2200#, 16#00a65b202c334f00#,
16#2c344400475d1807#, 16#2e646171005c2520#,
16#35230018732e6f6c#, 16#72b2007f0100642c#,
16#2e707465730a3b34#, 16#2c31703400206567#,
16#400a3b3303f80025#, 16#2061726220317025#,
16#0090325f3142424c#, 16#090091341f00d302#,
16#31351f00315d302e#, 16#1f000031311f0900#,
16#00f3321009003136#, 16#656469772e6c7573#,
16#8200c137642300f8#, 16#732e6464610a3b34#,
16#00004d2c31230047#, 16#2c3223001a090022#,
16#2c3323001a0d0098#, 16#646cb3001a0200e3#,
16#6c6974616c6f762e#, 16#5b202c314001f465#,
16#1201001d5d1f0028#, 16#00545d3222001d32#,
16#2c332200186e7223#, 16#0a3b3266257a003a#,
16#2000320000377473#, 16#0a3b3332001d5d31#,
16#7465720a3ac00175#, 16#00000a0a7d0a0a3b#
      );

   type Fatbin_Wrapper is record
      Magic : Interfaces.C.int;
      Version : Interfaces.C.int;
      Data : System.Address;
      Filename_Or_Fatbins : System.Address;
   end record;
   Wrapper : Fatbin_Wrapper := (16#466243b1#, 1, Fat_Binary'Address, System.Null_Address);
   Fatbin_Handle : System.Address;

   Num_Elements : Integer := 512;

   H_A, H_B, H_C : Access_Host_Float_Array;
   D_A, D_B, D_C : System.Address;
   Array_Size : CUDA.Crtdefs.Size_T := CUDA.Crtdefs.Size_T(Interfaces.C.c_float'size * Num_Elements / 8);

   Threads_Per_Block : Integer := 256;
   Blocks_Per_Grid : Integer :=
     (Num_Elements + Threads_Per_Block - 1) / Threads_Per_Block;

   Gen : Generator;
   Err : Error_T;

   Kernel_Name : Interfaces.C.Strings.Chars_Ptr := Interfaces.C.Strings.New_Char_Array("kernel__vector_add");

   Blocks : Cuda.Vector_Types.Dim3 := (Interfaces.C.Unsigned(Threads_Per_Block), 1, 1);
   Grids : Cuda.Vector_Types.Dim3 := (Interfaces.C.Unsigned(Blocks_Per_Grid), Interfaces.C.Unsigned(1), Interfaces.C.Unsigned(1));

begin
   Fatbin_Handle := CUDA.Internal.Register_Fat_Binary (Wrapper'Address);
   CUDA.Internal.Register_Function (Fatbin_Handle, Vector_Add'Address, Kernel_Name, Kernel_Name, -1, System.Null_Address, System.Null_Address, System.Null_Address, System.Null_Address, System.Null_Address);
   CUDA.Internal.Register_Fat_Binary_End (Fatbin_Handle);

   Put_Line ("[Vector addition of " & Num_Elements'Img & " elements]");

   H_A := new Float_Array (1 .. Num_Elements);
   H_B := new Float_Array (1 .. Num_Elements);
   H_C := new Float_Array (1 .. Num_Elements);

   if H_A = null or else H_B = null or else H_C = null then
      Put_Line("Failed to allocate host vectors!");

      return;
   end if;

   H_A.all := (others => Float (Random (Gen)));
   H_B.all := (others => Float (Random (Gen)));

   D_A := Cuda.Runtime_Api.Malloc (Array_Size);
   D_B := Cuda.Runtime_Api.Malloc (Array_Size);
   D_C := Cuda.Runtime_Api.Malloc (Array_Size);

   Cuda.Runtime_Api.Memcpy
     (Dst   => D_A,
      Src   => H_A.all'Address,
      Count => Array_Size,
      Kind  => Memcpy_Host_To_Device);

   Cuda.Runtime_Api.Memcpy
     (Dst   => D_B,
      Src   => H_B.all'Address,
      Count => Array_Size,
      Kind  => Memcpy_Host_To_Device);

   Put_Line ("CUDA kernel launch with " & blocks_Per_Grid'Img &
               " blocks of " & Threads_Per_Block'Img & "  threads");

   pragma CUDA_Execute
     (Vector_Add (D_A, D_B, D_C, Num_Elements),
      Blocks,
      Grids);

   Err := Get_Last_Error;

   -- TODO: Need to wrapp correctly Get_Error_String and return a String instead of a C string
   --      if Err /= Success then
   --        Put_Line  ("Failed to launch vectorAdd kernel (error code " & Get_Error_String (Err) & " )");
   --        return;
   --      end if;

   Put_Line ("Copy output data from the CUDA device to the host memory");

   Cuda.Runtime_Api.Memcpy
     (Dst   => H_C.all'Address,
      Src   => D_C,
      Count => Array_Size,
      Kind  => Memcpy_Device_To_Host);

   for I in 1..Num_Elements loop
      if abs (H_A (I) + H_B (I) - H_C (I)) > 1.0E-5 then
         Put_Line ("Result verification failed at element "& I'Img & "!");

         return;
      end if;
   end loop;

   Put_Line ("Test PASSED");

   Free (D_A);
   Free (D_B);
   Free (D_C);

   Free (H_A);
   Free (H_B);
   Free (H_C);

   Put_Line ("Done");
end Main;
