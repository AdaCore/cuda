------------------------------------------------------------------------------
--                       Copyright (C) 2017, AdaCore                        --
-- This is free software;  you can redistribute it  and/or modify it  under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
-- sion.  This software is distributed in the hope  that it will be useful, --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public  License  distributed  with  this  software;   see  file --
-- COPYING3.  If not, go to http://www.gnu.org/licenses for a complete copy --
-- of the license.                                                          --
------------------------------------------------------------------------------

with Geometry;               use Geometry;
with Ada.Containers.Vectors; use Ada.Containers;

package Volumes is

   type Volume is private;

   subtype Vertex_Index is Integer range -1 .. Integer'Last;
   subtype Indexed_Vertex_Index is Vertex_Index range 0 .. Vertex_Index'Last;
   type Vertex_Index3 is array (1 .. 3) of Vertex_Index;

   subtype Face_Index is Integer range -1 .. Integer'Last;
   subtype Indexed_Face_Index is Face_Index range 0 .. Face_Index'Last;

   subtype Halfedge_Index is Integer range -1 .. Integer'Last;
   subtype Indexed_Halfedge_Index is Halfedge_Index range 0 .. Halfedge_Index'Last;

   function Create_Vertex (Shape : in out Volume; Point : Point_Real) return Vertex_Index;

   procedure Create_Face (Shape : in out Volume; V1, V2, V3 : Vertex_Index);

   procedure Clear (Shape : in out Volume);

   function Get_Vertices (Shape : Volume; Index : Face_Index) return Vertex_Index3;

   function Get_Vertex (Shape : Volume; Index : Vertex_Index) return Point_Real;

   function First_Face_Index (Shape : Volume) return Face_Index;
   function Last_Face_Index (Shape : Volume) return Face_Index;

   function First_Vertex_Index (Shape : Volume) return Vertex_Index;
   function Last_Vertex_Index (Shape : Volume) return Vertex_Index;

   function Missing_Opposite_Count (Shape : Volume) return Integer;

private

   type Halfedge is record
      -- The vertex pointed by this halfedge
      Vertex : Vertex_Index := -1;

      -- The adjacent face to this halfedge
      Face : Face_Index := -1;

      -- The next halfedge of the boundary, counterclock wise
      Next : Halfedge_Index := -1;

      -- the prev halfedge of the boundary, counterclock wise
      Prev : Halfedge_Index := -1;

      -- The opposite (or inverse) halfedge
      Opposite : Halfedge_Index := -1;
   end record;

   type Face is record
      -- One of the halfedge connected to this face
      Halfedge : Halfedge_Index := -1;
   end record;

   type Vertex is record
      Point : Point_Real;

      -- One of the halfedge connected to this vertex
      Halfedge : Halfedge_Index := -1;
   end record;

   package Halfedge_Vectors is new Ada.Containers.Vectors (Indexed_Halfedge_Index, Halfedge);
   package Face_Vectors is new Ada.Containers.Vectors (Indexed_Face_Index, Face);
   package Vertex_Vectors is new Ada.Containers.Vectors (Indexed_Vertex_Index, Vertex);
   package Halfedge_Index_Vectors is new Ada.Containers.Vectors (Natural, Halfedge_Index);
   use Halfedge_Index_Vectors;
   package Halfedge_Index_Vectors_Vectors is new Ada.Containers.Vectors (Indexed_Vertex_Index, Halfedge_Index_Vectors.Vector);

   use Halfedge_Vectors;
   use Face_Vectors;

   use Halfedge_Index_Vectors_Vectors;

   type Volume is record
      Halfedges : Halfedge_Vectors.Vector;
      Faces : Face_Vectors.Vector;
      Vertices : Vertex_Vectors.Vector;
      Halfedges_Missing_Opposites : Halfedge_Index_Vectors_Vectors.Vector;
   end record;

end Volumes;
